<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context.xsd
   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 保证dao和service能注入到action -->
    <context:component-scan base-package="org.wsh.common.rest.action,org.wsh.common.rest.socket"/>
    <mvc:annotation-driven/>
    <!-- velocity -->
    <bean id="velocityConfig"
          class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/views"/>
        <property name="configLocation" value="classpath:/messages/velocity.properties"/>
    </bean>

    <!-- 静态文件路径过滤 -->
    <mvc:default-servlet-handler/>

    <!-- 视图解析配置 -->
    <!-- Velocity Layout视图解析配置 -->
    <bean id="velocityLayout"
          class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
        <property name="cache" value="true"/>
        <property name="prefix" value=""/>
        <property name="suffix" value=".vm"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
        <property name="dateToolAttribute" value="date"/>
        <property name="numberToolAttribute" value="number"/>
        <property name="toolboxConfigLocation" value="/WEB-INF/velocity-toolbox.xml"/>
        <property name="layoutUrl" value="layout/layout.vm"/>
        <property name="layoutKey" value="layout"/>
        <property name="screenContentKey" value="screen_content"/>
    </bean>

    <!-- 前端DispatcherController控制器 -->
    <bean
            class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

    <!-- DispatcherController控制器跳转URL的映射 -->
    <bean id="lastHandlerMapping"
          class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="order" value="999"/>
        <!-- 该Controller 会把/index.html解析成/index 然后再通过viewResolver对index进行扩展为/index.vm -->
        <property name="defaultHandler">
            <bean class="org.springframework.web.servlet.mvc.UrlFilenameViewController"/>
        </property>
    </bean>

    <!-- 激活@RequestMapping注解 对@ResultMapping标签的解析 在Spring3.0.5这个版本上，<mvc:annotation-driven/>声明是没有
        defaultAnnotationHandlerMapping这个属性的， 对于@ResultMapping标签的解析，是写死了必须用 "org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping”
        这个类来处理的。 -->
    <!-- 激活@RequestMapping注解 对@ResultMapping标签的解析 在Spring3.0.5这个版本上，<mvc:annotation-driven/>声明是没有
        defaultAnnotationHandlerMapping这个属性的， 对于@ResultMapping标签的解析，是写死了必须用 "org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping”
        这个类来处理的。 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="order" value="100"/>
    </bean>

    <!-- 拦截器 -->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
        <mvc:interceptor>
            <!-- 过滤URL(/**表示拦截所有请求) -->
            <mvc:mapping path="/**"/>
            <!-- 不过滤的URL(exclude-mapping必须放在mapping下面) -->
            <mvc:exclude-mapping path="/login.html"/>
            <bean id="baseInterceptor" class="org.wsh.common.rest.interceptor.BaseInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>


    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 (messageConverters通知转换) -->
    <bean
            class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <!-- 注入对应协议的解析器完成对象的转换工作(Json) -->
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>
    <!-- SpringMVC层跟JSon结合 Json返回格式化转换 •@RequestBody 将HTTP请求正文转换为适合的HttpMessageConverter对象。
        •@ResponseBody 将内容或对象作为 HTTP 响应正文返回， 并调用适合HttpMessageConverter的Adapter转换对象，写入输出流。
        List<HttpMessageConverter> = 引用 ByteArrayHttpMessageConverter StringHttpMessageConverter
        ResourceHttpMessageConverter SourceHttpMessageConverter XmlAwareFormHttpMessageConverter
        Jaxb2RootElementHttpMessageConverter MappingJacksonHttpMessageConverter -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
</beans>