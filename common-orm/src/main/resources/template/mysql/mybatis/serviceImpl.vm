package ${serviceImplPackage} ;

import ${pojoPackage}.${bigDoName};
import ${daoPackage}.${bigDaoName};
import ${servicePackage}.${bigServiceName};
import org.springframework.dao.DuplicateKeyException;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.util.Assert;
import org.springframework.stereotype.Service;
import org.wsh.common.util.logger.LoggerService;
import org.wsh.common.pager.pagination.Pagination;
import org.wsh.common.support.beans.OptionsResponseDO;
import org.wsh.common.support.response.ResponseDO;
import javax.annotation.Resource;
import static org.wsh.common.support.beans.BeansUtil.newOptionsResponseDO;
import static org.wsh.common.support.beans.BeansUtil.newStaticOptionsResponseDO;
import static org.wsh.common.support.beans.BeansUtil.newStaticResponseDO;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

/**
* author: wsh
* JDK-version:  JDK1.8
* comments:  ${headName}服务实现层
* since Date： ${date}
*/
@Service("${minServiceName}")
public class ${bigServiceImplName} extends LoggerService implements ${bigServiceName}{

    @Resource
    private ${bigDaoName} ${minDaoName};

	/**
	* 多条件查询(分页)
	* @param ${minDoName} ${bigDoName}
	* @param pagination  Pagination
	* @return List<${bigDoName}>
    */
    @Override
    public OptionsResponseDO<List<${bigDoName}>> query${bigDoName}ListForPage(${bigDoName} ${minDoName}, Pagination pagination){
        try {
            int totalCount = ${minDaoName}.selectCountByParams(${minDoName});
            if (totalCount <= 0) {
                return newStaticOptionsResponseDO(new ArrayList<${bigDoName}>());
            }
            pagination.setTotalCount(totalCount);
            List<${bigDoName}> ${minDoName}List = ${minDaoName}.selectListByParams(${minDoName}, pagination.getRowBounds());
            return newOptionsResponseDO(totalCount, ${minDoName}List, pagination.getPageSize(),pagination.getPP());
        } catch (Exception e) {
            logger.error("多条件分页查询列表异常!",e);
            return new OptionsResponseDO<>();
        }
    }

    /**
    * 根据用户ID查询
    * @param id Long
    * @return ResponseDO<${bigDoName}>
    */
    @Override
    @Cacheable(value = "common:${minDoName}",key = "'common:${minDoName}:id:' + #id")
    public ResponseDO<${bigDoName}> get${bigDoName}ById(${idType} id){
        try {
#if(${idType} != "String")
            Assert.notNull(id,"查询Id不能为空!");
#else
            Assert.hasText(id,"查询Id不能为空!");
#end
            ${bigDoName} ${minDoName} = ${minDaoName}.selectById(id);
            return newStaticResponseDO(${minDoName});
        } catch (IllegalArgumentException e) {
            logger.warn("根据ID查询校验参数异常!",e);
            return new ResponseDO<>(Errors.PARAMETER_ERROR.getErrorCode(),e.getMessage());
        } catch (Exception e) {
            logger.error("根据ID=>[" + id + "]查询信息异常!",e);
            return new ResponseDO<>(Errors.DEFAULT_ERROR.getErrorCode(),Errors.DEFAULT_ERROR.getErrorMsg());
        }
    }

    /**
    * 多条件查询信息
    * @param ${minDoName} ${bigDoName}
    * @return ResponseDO<${bigDoName}>
    */
    @Override
    public ResponseDO<${bigDoName}> get${bigDoName}ByParams(${bigDoName} ${minDoName}){
        try {
            return newStaticResponseDO(${minDaoName}.selectByParams(${minDoName}));
        } catch (Exception e) {
            logger.error("多条件查询信息异常!",e);
            return new ResponseDO<>(Errors.DEFAULT_ERROR.getErrorCode(),Errors.DEFAULT_ERROR.getErrorMsg());
        }
    }

    /**
    * 新增
    * @param ${minDoName} ${bigDoName}
    * @return ResponseDO<${bigDoName}>
    */
    @Override
    @CachePut(value = "common:${minDoName}",key = "'common:${minDoName}:id:' + #${minDoName}.id")
    public ResponseDO<${bigDoName}> add${bigDoName}(${bigDoName} ${minDoName}){
        try {
            // Validate
            validateForAdd(${minDoName});

            // Insert
            int result = ${minDaoName}.insert(${minDoName});
            if (result < 1) {
                throw new Exception("sql插入数据为0,请检查各项参数!");
            }
            logger.info("新增ID=>[" + ${minDoName}.getId() + "]的${bigDoName}成功");
            return newStaticResponseDO(${minDoName});
        } catch (IllegalArgumentException e) {
            logger.warn("新增${bigDoName}校验参数异常!",e);
            return new ResponseDO<>(Errors.PARAMETER_ERROR.getErrorCode(),e.getMessage());
        } catch (DuplicateKeyException e) {
            logger.error("新增ID=>[" + ${minDoName}.getId() + "]${bigDoName}已存在!",e);
            return new ResponseDO<>(Errors.REPEAT_SUBMIT.getErrorCode(),Errors.REPEAT_SUBMIT.getErrorMsg());
        } catch (Exception e) {
            logger.error("新增ID=>[" + ${minDoName}.getId() + "]${bigDoName}异常!",e);
            return new ResponseDO<>(Errors.DEFAULT_ERROR.getErrorCode(),Errors.DEFAULT_ERROR.getErrorMsg());
        }
    }

    /**
    * Validate Add
    * @param ${minDoName} ${bigDoName}
    */
    private void validateForAdd(${bigDoName} ${minDoName}) {
        Assert.isTrue(${minDoName} != null,"${minDoName}不能为空!");
        // TODO Validate
    }

    /**
    * 修改
    * @param ${minDoName} ${bigDoName}
	* @return ResponseDO<${bigDoName}>
    */
    @Override
    @CacheEvict(value = "common:${minDoName}",key = "'common:${minDoName}:id:' + #${minDoName}.id",beforeInvocation = true)
    public ResponseDO<${bigDoName}> modify${bigDoName}(${bigDoName} ${minDoName}){
        try {

            // validate
            ${bigDoName} old${bigDoName} = validateForUpdate(${minDoName});

            // Update
            ${minDoName}.setVersion(old${bigDoName}.getVersion());
            int result = ${minDaoName}.updateById(${minDoName});
            if (result < 1) {
                throw new Exception("sql修改数据为0,请检查各项参数!");
            }
            logger.info("修改ID=>[" + ${minDoName}.getId() + "]的${minDoName}成功!");
            return newStaticResponseDO(${minDoName});
        } catch (IllegalArgumentException e) {
            logger.warn("修改${bigDoName}校验参数异常!",e);
            return new ResponseDO<>(Errors.PARAMETER_ERROR.getErrorCode(),e.getMessage());
        } catch (Exception e) {
            logger.error("修改ID=>[" + ${minDoName}.getId() + "]${bigDoName}异常!",e);
            return new ResponseDO<>(Errors.DEFAULT_ERROR.getErrorCode(),Errors.DEFAULT_ERROR.getErrorMsg());
        }
    }

    /**
    * Validate Update
    * @param ${minDoName} ${bigDoName}
    * @return ${bigDoName}
    */
    private ${bigDoName} validateForUpdate(${bigDoName} ${minDoName}) {

        Assert.notNull(${minDoName},"${minDoName}不能为空!");
#if(${idType} != "String")
        Assert.isTrue(${minDoName}.getId() != null,"查询Id不能为空!");
#else
        Assert.isTrue(StringUtils.isBanlk(${minDoName}.getId()),"查询Id不能为空!");
#end
        // TODO Validate
        ${bigDoName} old${bigDoName} = ${minDaoName}.selectById(${minDoName}.getId());
        Assert.notNull(old${bigDoName},"查询不到ID=>[" + ${minDoName}.getId() + "]的信息!");
        return old${bigDoName};
    }

    /**
    * 删除(逻辑删除)
    * @param id Long
    * @return ResponseDO<${bigDoName}>
    */
    @Override
    @CacheEvict(value = "common:${minDoName}",key = "'common:${minDoName}:id:' + #id",beforeInvocation = true)
    public ResponseDO<${bigDoName}> del${bigDoName}(${idType} id){
        try {

            // validate
#if(${idType} != "String")
            Assert.notNull(id,"缺少必要参数!");
#else
            Assert.hasText(id,"缺少必要参数!");
#end
            ${bigDoName} old${minDoName} = ${minDaoName}.selectById(id);
            Assert.notNull(old${minDoName},"传入参数有误!");
            ${bigDoName} ${minDoName} = new ${bigDoName}();
            ${minDoName}.setId(id);
            ${minDoName}.setIsDeleted(1);
            ${minDoName}.setVersion(old${minDoName}.getVersion());
            // update
            int result = ${minDaoName}.updateIsDeleteById(${minDoName});
            if (result < 1) {
                throw new Exception("数据已删除,请勿重复操作!");
            }
            logger.info("删除ID=>[" + id + "]的${minDoName}成功!");
            return newStaticResponseDO(${minDoName});
        } catch (IllegalArgumentException e) {
            logger.warn("删除${bigDoName}校验参数异常!",e);
            return new ResponseDO<>(Errors.PARAMETER_ERROR.getErrorCode(),e.getMessage());
        } catch (Exception e) {
            logger.error("删除ID=>[" + id + "]${bigDoName}异常!",e);
            return new ResponseDO<>(Errors.DEFAULT_ERROR.getErrorCode(),Errors.DEFAULT_ERROR.getErrorMsg());
        }
    }
}
