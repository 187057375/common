1. @Documented
@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。
2. @Inherited
@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。
3. @Target
@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。
ElementType.CONSTRUCTOR  作用于构造器
ElementType.FIELD  作用于域/属性
ElementType.LOCAL_VARIABLE  用于描述局部变量
ElementType.METHOD  作用于方法
ElementType.PACKAGE   用于描述包
ElementType.PARAMETER   用于描述参数
ElementType.TYPE   用于描述类、接口(包括注解类型) 或enum声明，最常用
单个修饰对象的范围：
[java] view plain copy print?在CODE上查看代码片派生到我的代码片
@Target(ElementType.TYPE)
多个：
[java] view plain copy print?在CODE上查看代码片派生到我的代码片
@Target({ ElementType.TYPE, ElementType.METHOD})
4. Retention
定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。
RetentionPolicy.RUNTIME 注解会在class字节码文件中存在，在运行时可以通过反射获取到
RetentionPolicy.CLASS 默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得
RetentionPolicy.SOURCE 注解仅存在于源码中，在class字节码文件中不包含

自定义注解：
    使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。
    定义注解格式：
　　   public @interface 注解名 {定义体}
　　 注解参数的可支持数据类型：
　　　　1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)
　　　　2.String类型
　　　　3.Class类型
　　　　4.enum类型
　　　　5.Annotation类型
　　　　6.以上所有类型的数组
　　Annotation类型里面的参数该怎么设定:
    　 第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　 　
    　 第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;　　
    　 第三,如果只有一个参数成员,最好把参数名称设为"value",后加小括号.例:下面的例子FruitName注解就只有一个参数成员。