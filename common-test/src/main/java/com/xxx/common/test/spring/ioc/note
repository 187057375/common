IoC容器初始化：
Spring的IoC容器初始化包括：Bean定义资源文件的定位、载入和注册3个基本过程。
(1).Bean定义资源文件的定位：
Bean定义资源文件定位由ResourceLoader通过统一的Resource接口来完成，Resource接口将各种形式的Bean定义资源文件封装成统一的、IoC容器可进行载入操作的对象。
(2).Bean定义资源文件的载入：
Bean定义资源文件载入的过程是将Bean定义资源文件中配置的Bean转换成IoC容器中所管理Bean的数据结构形式。SpringIoC中管理的Bean的数据结构是BeanDefinition，BeanDefinition是POJO对象在IoC容器中的抽象。
(3).Bean定义的注册：
通过调用BeanDefinitionRegistry接口把从Bean定义资源文件中解析的Bean向IoC容器进行注册，在IoC容器内部，是通过一个HashMap来存储这些Bean对象数据的。
注意：IoC容器和上下文初始化一般不包含Bean依赖注入的实现。一般而言，依赖注入发送在应用第一次通过getBean方法向容器获取Bean时。但是有个特例是：IoC容器预实例化配置的lazyinit属性，如果某个Bean设置了lazyinit属性，则该Bean的依赖注入在IoC容器初始化时就预先完成了。

Bean定义资源文件的定位过程：
ApplicationContext是一个在BeanFactory基础上提供了扩展的接口，具体的IoC容器实现常用的有：(从文件系统中读入Bean定义资源文件)、ClassPathXmlApplicationContext(从Classpath类路径中读入Bean定义资源文件)和XmlWebApplicationContext(从Web容器如Tomcat等中读入Bean定义资源文件)等。以FileSystemXmlApplicationContet为例，通过分析FileSystemXmlApplicationContet及其父类的源码来分析IoC容器定位Bean定义资源文件的实现过程